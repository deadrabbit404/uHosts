#!/system/bin/sh

# Directory where hosts file is located
HOSTSDIR="/data/adb/modules/hosts/system/etc"

# Path to hosts file
HOSTSFILE="$HOSTSDIR/hosts"

# Variable for determining which variant to update
ACTIVE_VARIANT=""

# Set colors
R="\e[1;31m"    # Red
G="\e[1;32m"    # Green
Y="\e[1;33m"    # Yellow
N="\e[0m"       # No color

# Use built-in magisk busybox if not found on system
busybox > /dev/null 2>&1
[ $? -ne 0 ] && alias wget="/data/adb/magisk/busybox wget"

show_banner () {
    clear
    echo -e "$R"
    cat << 'EOF'
        _   _           _
       | | | |         | |
  _   _| |_| | ___  ___| |_ ___
 | | | |  _  |/ _ \/ __| __/ __|
 | |_| | | | | (_) \__ \ |_\__ \
  \__,_\_| |_/\___/|___/\__|___/ v0.2-rc1
EOF
echo -e "$Y  by: deadrabbit404@GitHub$N\n"
}

main_menu () {
    show_banner
    print_status
    echo -e "\nSelect one of the options below\n"
    echo -e "(Variants)"
    echo -e "  [${Y}m$N] mini"
    echo -e "  [${Y}l$N] Lite (recommended)"
    echo -e "  [${Y}p$N] Pro"
    echo -e "  [${Y}x$N] Xtra"
    echo -e "\n(Other options)"
    echo -e "  [${Y}u$N] Update current variant"
    echo -e "  [${Y}s$N] Show description for each variant"
    echo -e "  [${Y}f$N] Fallback to system default hosts"
    echo -e "  [${Y}q$N] Quit"
}

quit_prompt () {
    echo -e "--------------------------------------"
    echo -e "    ${Y}<enter>$N: Main menu,    ${Y}q$N: Quit"
    echo -e "--------------------------------------"
    echo -ne "Select: "
    read choice
    case $choice in
        [Qq]|[Qq][Uu][Ii][Tt])
            exit 0
            ;;
        "")
            # return to main menu when enter key is press
            ;;
        *)
            # print a funny message when a wrong key
            # is press before returning main menu
            echo -en "${R}n00b alert!$N"
            sleep 1
            ;;
    esac
}

verify_systemless_hosts () {
# Check if systemless host is enabled in Magisk
    if [ ! -d "$HOSTSDIR" ]
    then
        echo -e "$R[×] Systemless hosts is disabled.$N"
        echo -e "    - Enable it via Magisk>Settings>Systemless hosts"
        echo -e "    - Reboot and re-run the script"
        exit 1
    fi
}

count_block_domains () {
    grep -F "0.0.0.0" $HOSTSFILE | grep -cv "0\.0\.0\.0\$"
}

print_status () {
# Check if your device is using one of the variants
# and print the active variant on the screen
    variant=`grep "Title:" $HOSTSFILE | awk -F'(' '{ print $2 }' | grep -oE '[a-zA-Z]+'`
    sleep 0.5

    if [ -z "$variant" ]
    then
        # Set ACTIVE_VARIANT to empty string
        ACTIVE_VARIANT=""
        echo -e "Status: ${R}Unprotected$N"
        echo -e "Active variant: ${R}N/A$N"

    else
        # Update ACTIVE_VARIANT
        ACTIVE_VARIANT=$variant
        echo -e "Status: ${G}Protected$N"
        echo -e "Active variant: $G$variant$N"
        echo -e "Total blocked domains: ${G}$(count_block_domains)$N"
    fi

    sleep 0.5
}

show_variants () {
# Show description for each variant
    show_banner
    echo -e "Available variants:\n"
    echo -e "  ${G}mini$N - lenient; unblocks a number of ads & trackers for in-app rewards"
    echo -e "  ${G}Lite$N - balanced; doesn't hamper user experience (UX), recommended"
    echo -e "  ${G}Pro$N  - strict; prioritizes privacy & safety (adblocking) over UX"
    echo -e "  ${G}Xtra$N - extremely aggressive & restrictive"
    echo -e "\nPress Enter to return to main menu"
    read choice
}

spinner () {
# Show a spinning animation while a process is running
    spin=('-' '\' '|' '/')
    while kill -0 $1 2> /dev/null
    do
        for i in "${spin[@]}"
        do
            echo -ne "\r[$i] $2"
            #echo -ne "$2"
            sleep 0.05
        done
    done
    echo -ne "\r[+] $2\n"
}

download () {
# Download chosen variant and set it as the hosts file
    rhost="o0.pages.dev"
    remote_file="https://$rhost/$1/hosts.txt"
    show_banner

    wget -q --no-check-certificate $remote_file -O $HOSTSFILE > /dev/null 2>&1 &
    pid=$!
    spinner $pid "Downloading $Y$1$N variant"
    wait $pid

    if [ $? -eq 0 ]
    then
        echo -e "${G}[+] Download complete$N"
    else
        echo -e "${R}[×] Download failed!$N"
        print_troubleshoot
    fi
    quit_prompt

}

check_conn () {
# Check connectivity to remote host
    wget -q --no-check-certificate --spider -T 3 $1 > /dev/null 2>&1 &
    pid=$!
    spinner $pid "Connecting to $1"
    wait $pid
}

check_update () {
# Check if the variant has a new update on remote host
# return 1 if there is an update
# return 0 if there is none
    rhost=$1
    variant=$2
    rfile="https://$rhost/$variant/hosts.txt"
    mtime_local=`grep "Last modified" $HOSTSFILE | awk '{ print $4 }'`
    mtime_remote=`wget -O- -q --no-check-certificate $rfile 2> /dev/null | grep "Last modified" | awk '{ print $4 }'`
    if [ "$mtime_local" = "$mtime_remote" ]
    then
        return 0
    else
        return 1
    fi
}

update () {
# Update current hosts variant but only if there is one
    rhost="o0.pages.dev"
    if [ ! -z "$ACTIVE_VARIANT" ]
    then
        show_banner
        check_conn $rhost
        if [ $? -eq 0 ]
        then
            check_update $rhost $ACTIVE_VARIANT & pid=$!
            spinner $pid "Checking updates for $Y$ACTIVE_VARIANT$N"
            wait $pid

            if [ $? -eq 0 ]
            then
                echo -e "${G}[+] Already the latest$N"
                quit_prompt
            else [ $? -eq 1 ]
                echo -e "${G}[+] Update available$N"
                sleep 1
                download $ACTIVE_VARIANT
            fi
        else
            echo -e "${R}[×] Unable to connect to $rhost$N"
            print_troubleshoot
            quit_prompt
        fi
    else
        echo -ne "\n${R}[!] Apply a variant first, you bozo!$N"
        sleep 2
    fi
}

print_troubleshoot () {
# Print a message suggesting the user for possible
# solution for update and download error
    echo -e "${Y}[!] Possible solutions:$N"
    echo -e "  - Check your internet connection"
    echo -e "  - Disable your other ad-blockers" 
}

restore_default () {
# Restore the default hosts file
    show_banner
    sleep 1 & pid=$!
    spinner $pid "Reverting back to default hosts"
    echo -e "127.0.0.1\tlocalhost" > $HOSTSFILE
    echo -e "::1\t\tip6-localhost" >> $HOSTSFILE
    echo -e "${G}[+] Done$N"
    sleep 1
}

# Exit immediately if not root
if [ `id -u` -ne 0 ]
then
    echo -e "${R}You are not root!$N"
    exit 1
fi

verify_systemless_hosts

while true
do
    main_menu
    echo -en "\nSelect: "
    read choice

    case $choice in
        [mM])
            download "mini"
            ;;
        [lL])
            download "Lite"
            ;;
        [pP])
            download "Pro"
            ;;
        [xX])
            download "Xtra"
            ;;
        [fF])
            restore_default
            ;;
        [sS])
            show_variants
            ;;
        [uU])
            update
            ;;
        [qQ])
            exit 0
	        ;;
        *)
            echo -en "${R}Are you blind bruh?$N"
            sleep 1
            ;;
    esac
done
