#!/system/bin/sh
#
# Declare constants
HOSTSDIR="/data/adb/modules/hosts/system/etc"
HOSTSFILE="$HOSTSDIR/hosts"

# Global variable that determines which variant to update
ACTIVE_VARIANT=""

show_banner () {
    clear
    echo -e "\e[1;31m"
    cat << 'EOF'
        _   _           _
       | | | |         | |
  _   _| |_| | ___  ___| |_ ___
 | | | |  _  |/ _ \/ __| __/ __|
 | |_| | | | | (_) \__ \ |_\__ \
  \__,_\_| |_/\___/|___/\__|___/ v0.1
EOF
echo -e "\e[1;33m  by: deadrabbit404@GitHub  \e[0m\n"
}

main_menu () {
    show_banner
    check_status
	printf "\nSelect one of the options below\n\n"
	printf "(Variants)\n"
	printf "  [\e[1;33mm\e[0m] mini\n"
	printf "  [\e[1;33ml\e[0m] Lite (recommended)\n"
	printf "  [\e[1;33mp\e[0m] Pro\n"
	printf "  [\e[1;33mx\e[0m] Xtra\n"
	printf "\n(Other options)\n"
	printf "  [\e[1;33mu\e[0m] Update current variant\n"
	printf "  [\e[1;33ms\e[0m] Show description for each variant\n"
	printf "  [\e[1;33mf\e[0m] Fallback to system default hosts\n"
	printf "  [\e[1;33mr\e[0m] Reboot to apply changes\n"
	printf "  [\e[1;33mq\e[0m] Quit\n"
}

verify_systemless_hosts () {
# Check if systemless host is enabled in Magisk
    if [ ! -d "$HOSTSDIR" ]; then
        printf "Systemless hosts is disabled.\n"
	printf "  - Enable it via Magisk>Settings>Systemless hosts\n"
	printf "  - Re-run the script\n"
	exit 1
    fi
}

check_status () {
# Check if your device is using one of the variants
# and print the active variant on the screen
    variant=`head -1 $HOSTSFILE | grep 'Title:' | grep -oE '\([a-zA-Z]+\)' | grep -oE '[a-zA-Z]+'`
    sleep 1
    if [ -z "$variant" ]
    then
	# Set ACTIVE_VARIANT to empty string
	ACTIVE_VARIANT=""

	# Interpolate with red color
        variant="\e[1;31mN/A\e[0m"
        printf "Status: \e[1;31mUnprotected\e[0m\n"

    else
	# Update ACTIVE_VARIANT global variable
	ACTIVE_VARIANT=$variant

	# Interpolate with light-green color
        variant="\e[1;32m${variant}\e[0m"
        printf "Status: \e[1;32mProtected\e[0m\n"
    fi

    printf "Active variant: $variant\n"
    sleep 1
}

show_variants () {
# Show description for each variant
    show_banner
    printf "Available variants:\n\n"
    printf "    \e[1;32mmini\e[0m - lenient; unblocks a number of ads & trackers for in-app rewards\n"
    printf "    \e[1;32mLite\e[0m - balanced; doesn't hamper user experience (UX), recommended\n"
    printf "    \e[1;32mPro\e[0m  - strict; prioritizes privacy & safety (adblocking) over UX\n"
    printf "    \e[1;32mXtra\e[0m - extremely aggressive & restrictive\n"
    printf "\nPress Enter to return to main menu "
    read choice
}

download_variant () {
# Download chosen variant and set it as the hosts file
    remote_file="https://o0.pages.dev/$1/hosts.txt"
    show_banner
    printf "Downloading $1 variant...\n\n"
    sleep 1
    wget $remote_file -O $HOSTSFILE
    if [ $? -eq 0 ]
    then
	printf "\n\e[1;32mDownload complete\e[0m\n"
	reboot_prompt
    else
	printf "\n\e[1;31mDownload failed, try again\e[0m\n"
	printf "Press Enter to return to main menu "
	read choice
    fi
    
}

update_variant () {
# Update current hosts variant but only if there is one
    if [ ! -z "$ACTIVE_VARIANT" ]
    then
	show_banner
        printf "Updating hosts file...\n"
	sleep 2
	# Call the download_variant function
        download_variant $ACTIVE_VARIANT
    else
	printf "\n\e[1;31mYou are not using any of the variants!\e[0m"
	sleep 3
    fi
}

restore_default () {
# Restore the default hosts file
    show_banner
    printf "Reverting back to default hosts...\n"
    sleep 2
    printf "127.0.0.1\tlocalhost\n" > $HOSTSFILE
    printf "::1\t\tip6-localhost\n" >> $HOSTSFILE
    printf "Done\n"
    reboot_prompt
}

reboot_prompt () {
# Ask the user to reboot
    printf "\e[1;31mNote:\e[0m You need to reboot to apply changes\n"
    printf "Do you want to reboot now? (y/n): "
    read choice
    case $choice in
	y|Y)
	    reboot_device
	    ;;
    esac
}

quit () {
# Quit the program
    printf "\e[1;31mNote:\e[0m Please reboot to apply any changes\n"
    exit 0
}

reboot_device () {
# Show reboot notice before rebooting
    printf "Rebooting in 3 seconds...\n"
    sleep 3
    reboot
}

# Run only if root
if [ `id -u` -ne 0 ]
then
    echo "You are not root!"
    exit 1
fi

verify_systemless_hosts
while true
do
    main_menu
    printf "\nSelect: "
    read choice

    case $choice in
	[mM])
	    download_variant "mini"
	    ;;
	[lL])
	    download_variant "Lite"
	    ;;
	[pP])
	    download_variant "Pro"
	    ;;
	[xX])
	    download_variant "Xtra"
	    ;;
	[fF])
	    restore_default
	    ;;
	[sS])
            show_variants
	    ;;
	[uU])
	    update_variant
	    ;;
        [qQ])
	    quit
	    ;;
	[rR])
	    reboot_device
	    ;;
	*)
	    printf "\e[1;31mAre you blind bruh?\e[0m"
	    sleep 3
	    ;;
    esac
done
